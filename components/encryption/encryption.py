from typing import ByteString
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives.serialization import load_pem_public_key
from cryptography.fernet import Fernet
from cryptography.hazmat.backends.openssl.rsa import _RSAPublicKey

import json
import binascii


def encrypt_data_with_new_key(data: dict, public_key_string: str):
    """Encrypts the Smart Patient Health Record. This generates a new \
       Fernet encryption algorithm which is used to encrypt the Smart \
       Patient Health Record. The key that is generated during this \
       process is then encrypted using a public key provided by the \
       request body. Both the encrypted data and encrypted key are \
       returned.

            Parameters:

                data (dict): The data which will be encrypted
                public_key (str): The public key generated by the frontend \
                                  as part of the request. This is used to \
                                  encrypt the Fernet key

            Returns:

                encrypted_data (str): The encrypted data that is returned \
                                      to the front end
                encryption_key (ByteString): The encrypted key that is \
                                             returned to the front end
                public_key (_RSAPublicKey): The public key generated by \
                                                the frontend as part of the \
                                                request
    """
    public_key = public_key_string.encode()
    public_key = load_pem_public_key(public_key, backend=default_backend())
    data = json.dumps(data).encode()
    encryption_key = Fernet.generate_key()
    encryption = Fernet(encryption_key)
    encrypted_data = encryption.encrypt(data).decode()
    return encrypted_data, encryption_key, public_key


def encrypt_key(key_to_encrypt: ByteString, public_key: _RSAPublicKey):
    """Encrypts the Fernet key. The Fernet key is used to encrypt the \
       Smart Patient Health Record. It is itself encrypted by a public \
       key provided by the frontend as part of the request allowing it \
       to be securely transmitted.

            Parameters:
                key_to_encrypt (ByteString): The Fernet key that will be \
                                             encrypted
                public_key (_RSAPublicKey): The public key generated by \
                                                the frontend as part of the \
                                                request

            Returns:
                key (str): The encrypted Fernet key that will be decrypted by \
                           the frontend enabling the Smart Patient Health \
                           Record to be decrypted
    """
    encrypted_key = public_key.encrypt(
        key_to_encrypt,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    key = binascii.b2a_base64(encrypted_key, newline=False)
    return key.decode()
