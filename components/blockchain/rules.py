from pydoc import doc
import requests
from components.staff.verify_staff_member import get_department_of_staff_member
from components.jwt.validate import validate_jwt
import os

BC_PATH = os.getenv('BC_PATH')


def get_rules(jwt: str, grantor_id: int, grantee_id: int):
    """
    Gathers all of the rules for a patient/healthcare provider combination. \
    These are stored on the blockchain running so this must be \
    accessible in order for this to work

        Parameters:
            jwt (str): The JWT used to authenticate a user within \
                       the Serums system. This is generated by the \
                       authentication module
            grantor_id (int): The serums id of the patient whose \
                              data the rule governs
            grantee_id (int): The serums id of the healthcare \
                              provider who is trying to access the \
                              data

        Returns:
            rules (list): A list of the rules which have been stored \
                          for this patient/healthcare provider combination
    """
    url = BC_PATH + '/v1/api/getRules'
    headers = {
        "Authorization": f"Bearer {jwt}",
        "Content-Type": "application/json"
    }
    data = {
        "filters": [
            {
                "filterType": "SIMPLE",
                "key": "grantor.id",
                "value": grantor_id
            },
            {
                "filterType": "NOT_EXPIRED"
            },
            {
                "filterType": "SIMPLE",
                "key": "grantee.id",
                "value": grantee_id
            }

        ]
    }
    response = requests.request('POST', url, headers=headers, json=data)
    return response.json()


def sum_up_rules(rules: list):
    """
    This compares all ALLOW and DENY rules and generates a list \
    of tags that are only found with an ALLOW rule

        Parameters:
            rules (list): The list of rules which have been found \
                          on the blockchain for a particular \
                          patient/healthcare provider combination
        Returns:
            tags (list): A list of valid tags which only have the \
                         ALLOW permission for them for this \
                         patient/healthcare provider combination
    """
    allow_tags = set()
    deny_tags = set()
    for rule in rules:
        for tag in rule['access']:
            if rule['action'] == 'ALLOW':
                allow_tags.add(tag['name'])
            if rule['action'] == 'DENY':
                deny_tags.add(tag['name'])
    tags = allow_tags ^ deny_tags
    return list(tags)


def validate_doctor(group_ids: list):
    """
    Checks to see whether MEDICAL_STAFF is in the group \
    ids section of the JWT.

        Parameters:
            group_ids (list): The list of group ids to \
                              check against
        Returns:
            valid (bool): Whether MEDICAL_STAFF was found
    """
    if 'MEDICAL_STAFF' in group_ids:
        return True
    return False


def get_valid_tags(jwt: str, patient_serums_id: int):
    """
    Gets the rules stored on the blockchain for a given \
    patient/healthcare provider combination. Uses the JWT \
    to validate the member of staff and gether their department \
    id as well as their serums id. These are both checked for all \
    ALLOW and DENY rules with the results being returned. The \
    rule ids are also returned for use by the lineage blockchain.

        Parameters:
            jwt (str): The JWT used to authenticate a user within \
                       the Serums system. This is generated by the \
                       authentication module
            patient_serums_id (int): The serums id for the patient \
                                     whose rules are being selected
        Returns:
            tags (list): A list of valid tags which are allowed for \
                         the healthcare provider. These will be used \
                         to validate they have access for the tags \
                         passed as part of the request
            rule_ids (list): A list of the rule ids which have been \
                             accessed and will be recorded to the \
                             lineage blockchain
    """
    tags = None
    rule_ids = None
    all_rules = []
    jwt_response = validate_jwt(jwt)
    requestor_type = jwt_response['user_type']
    if validate_doctor(requestor_type):
        doctor = get_department_of_staff_member(
            jwt_response['hospital_id'],
            jwt_response['serums_id']
        )
        ids = [doctor['serums_id'], doctor['department_id']]
        for id in ids:
            rules = get_rules(jwt, patient_serums_id, id)
            all_rules.extend(rules)
        tags = sum_up_rules(all_rules)
    if len(all_rules) > 0:
        rule_ids = [rule['id'] for rule in all_rules]
    return tags, rule_ids
